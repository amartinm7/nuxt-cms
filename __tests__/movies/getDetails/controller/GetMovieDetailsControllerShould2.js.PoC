// eslint-disable-next-line no-unused-vars
import { BeanContainerRegistry } from '../../../../middleware/BeanContainerRegistry'
import { GetMovieDetailsRepository } from '../../../../middleware/modules/movies/getDetails/infrastructure/repository/GetMovieDetailsRepository'
import { GetMovieDetailsControllerRequest } from '../../../../middleware/modules/movies/getDetails/userapplication/controller/GetMovieDetailsController'
import axios from 'axios'
const fs = require('fs')

// declare a request interceptor
axios.interceptors.request.use(
  (config) => {
    // perform a task before the request is sent
    // eslint-disable-next-line no-console
    console.log(
      'Axios interceptor on request... Request was sent...' + config.url
    )

    return config
  },
  (error) => {
    // handle the error
    return Promise.reject(error)
  }
)

// declare a response interceptor
axios.interceptors.response.use(
  (response) => {
    // do something with the response data
    // eslint-disable-next-line no-console
    console.log('>>>>Axios interceptor on response... Response was received')
    // eslint-disable-next-line no-console
    console.log(response.data)
    fs.writeFile('first.json', JSON.stringify([response.data]), (err) => {
      if (err) throw err
    })
    // eslint-disable-next-line no-console
    console.log(response.config.url)
    console.log(response)
    return response
  },
  (error) => {
    // handle the response error
    return Promise.reject(error)
  }
)

// eslint-disable-next-line no-unused-vars
const assert = require('assert')

console.log('welcome! GetMovieDetailsController test')

describe('GetMovieDetailsController', function() {
  describe('execute', function() {
    it('should save', async function() {
      // given
      // eslint-disable-next-line no-unused-vars
      const expected = require('./expectedGetMovieDetails.json')

      // const mockedAds = require('./getMovieDetailsRepositoryResponse.json')
      // const mockGetMovieDetailsRepository = jest.fn()
      // GetMovieDetailsRepository.prototype.execute = mockGetMovieDetailsRepository
      // mockGetMovieDetailsRepository.mockReturnValue(Promise.resolve(mockedAds))
      // when
      const beanContainer = BeanContainerRegistry.getBeanContainer()
      const getMovieDetailsControllerResponse = await beanContainer.getMovieDetailsController.execute(
        new GetMovieDetailsControllerRequest({
          movie_id: '385103'
        })
      )
      // then
      console.log(JSON.stringify(getMovieDetailsControllerResponse))
      // expect(getLatestFilmsRepositoryResponse.data.title).toEqual(expected.title)
      // expect(getMovieDetailsControllerResponse).toEqual(expected)
    })
  })
})
